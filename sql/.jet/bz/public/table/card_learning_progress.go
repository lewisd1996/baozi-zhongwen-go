//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CardLearningProgress = newCardLearningProgressTable("public", "card_learning_progress", "")

type cardLearningProgressTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz
	SessionID      postgres.ColumnString
	CardID         postgres.ColumnString
	UserID         postgres.ColumnString
	ReviewCount    postgres.ColumnInteger
	SuccessCount   postgres.ColumnInteger
	LastReviewedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CardLearningProgressTable struct {
	cardLearningProgressTable

	EXCLUDED cardLearningProgressTable
}

// AS creates new CardLearningProgressTable with assigned alias
func (a CardLearningProgressTable) AS(alias string) *CardLearningProgressTable {
	return newCardLearningProgressTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CardLearningProgressTable with assigned schema name
func (a CardLearningProgressTable) FromSchema(schemaName string) *CardLearningProgressTable {
	return newCardLearningProgressTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CardLearningProgressTable with assigned table prefix
func (a CardLearningProgressTable) WithPrefix(prefix string) *CardLearningProgressTable {
	return newCardLearningProgressTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CardLearningProgressTable with assigned table suffix
func (a CardLearningProgressTable) WithSuffix(suffix string) *CardLearningProgressTable {
	return newCardLearningProgressTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCardLearningProgressTable(schemaName, tableName, alias string) *CardLearningProgressTable {
	return &CardLearningProgressTable{
		cardLearningProgressTable: newCardLearningProgressTableImpl(schemaName, tableName, alias),
		EXCLUDED:                  newCardLearningProgressTableImpl("", "excluded", ""),
	}
}

func newCardLearningProgressTableImpl(schemaName, tableName, alias string) cardLearningProgressTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampzColumn("updated_at")
		SessionIDColumn      = postgres.StringColumn("session_id")
		CardIDColumn         = postgres.StringColumn("card_id")
		UserIDColumn         = postgres.StringColumn("user_id")
		ReviewCountColumn    = postgres.IntegerColumn("review_count")
		SuccessCountColumn   = postgres.IntegerColumn("success_count")
		LastReviewedAtColumn = postgres.TimestampzColumn("last_reviewed_at")
		allColumns           = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, SessionIDColumn, CardIDColumn, UserIDColumn, ReviewCountColumn, SuccessCountColumn, LastReviewedAtColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, SessionIDColumn, CardIDColumn, UserIDColumn, ReviewCountColumn, SuccessCountColumn, LastReviewedAtColumn}
	)

	return cardLearningProgressTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		SessionID:      SessionIDColumn,
		CardID:         CardIDColumn,
		UserID:         UserIDColumn,
		ReviewCount:    ReviewCountColumn,
		SuccessCount:   SuccessCountColumn,
		LastReviewedAt: LastReviewedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
