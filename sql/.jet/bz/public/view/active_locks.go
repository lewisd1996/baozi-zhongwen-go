//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ActiveLocks = newActiveLocksTable("public", "active_locks", "")

type activeLocksTable struct {
	postgres.Table

	// Columns
	Schemaname         postgres.ColumnString
	Relname            postgres.ColumnString
	Locktype           postgres.ColumnString
	Page               postgres.ColumnInteger
	Virtualtransaction postgres.ColumnString
	Pid                postgres.ColumnInteger
	Mode               postgres.ColumnString
	Granted            postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ActiveLocksTable struct {
	activeLocksTable

	EXCLUDED activeLocksTable
}

// AS creates new ActiveLocksTable with assigned alias
func (a ActiveLocksTable) AS(alias string) *ActiveLocksTable {
	return newActiveLocksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ActiveLocksTable with assigned schema name
func (a ActiveLocksTable) FromSchema(schemaName string) *ActiveLocksTable {
	return newActiveLocksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ActiveLocksTable with assigned table prefix
func (a ActiveLocksTable) WithPrefix(prefix string) *ActiveLocksTable {
	return newActiveLocksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ActiveLocksTable with assigned table suffix
func (a ActiveLocksTable) WithSuffix(suffix string) *ActiveLocksTable {
	return newActiveLocksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newActiveLocksTable(schemaName, tableName, alias string) *ActiveLocksTable {
	return &ActiveLocksTable{
		activeLocksTable: newActiveLocksTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newActiveLocksTableImpl("", "excluded", ""),
	}
}

func newActiveLocksTableImpl(schemaName, tableName, alias string) activeLocksTable {
	var (
		SchemanameColumn         = postgres.StringColumn("schemaname")
		RelnameColumn            = postgres.StringColumn("relname")
		LocktypeColumn           = postgres.StringColumn("locktype")
		PageColumn               = postgres.IntegerColumn("page")
		VirtualtransactionColumn = postgres.StringColumn("virtualtransaction")
		PidColumn                = postgres.IntegerColumn("pid")
		ModeColumn               = postgres.StringColumn("mode")
		GrantedColumn            = postgres.BoolColumn("granted")
		allColumns               = postgres.ColumnList{SchemanameColumn, RelnameColumn, LocktypeColumn, PageColumn, VirtualtransactionColumn, PidColumn, ModeColumn, GrantedColumn}
		mutableColumns           = postgres.ColumnList{SchemanameColumn, RelnameColumn, LocktypeColumn, PageColumn, VirtualtransactionColumn, PidColumn, ModeColumn, GrantedColumn}
	)

	return activeLocksTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Schemaname:         SchemanameColumn,
		Relname:            RelnameColumn,
		Locktype:           LocktypeColumn,
		Page:               PageColumn,
		Virtualtransaction: VirtualtransactionColumn,
		Pid:                PidColumn,
		Mode:               ModeColumn,
		Granted:            GrantedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
