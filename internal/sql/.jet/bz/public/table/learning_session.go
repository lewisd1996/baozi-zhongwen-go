//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var LearningSession = newLearningSessionTable("public", "learning_session", "")

type learningSessionTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz
	UserID      postgres.ColumnString
	DeckID      postgres.ColumnString
	EndedAt     postgres.ColumnTimestampz
	ReviewCount postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LearningSessionTable struct {
	learningSessionTable

	EXCLUDED learningSessionTable
}

// AS creates new LearningSessionTable with assigned alias
func (a LearningSessionTable) AS(alias string) *LearningSessionTable {
	return newLearningSessionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LearningSessionTable with assigned schema name
func (a LearningSessionTable) FromSchema(schemaName string) *LearningSessionTable {
	return newLearningSessionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LearningSessionTable with assigned table prefix
func (a LearningSessionTable) WithPrefix(prefix string) *LearningSessionTable {
	return newLearningSessionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LearningSessionTable with assigned table suffix
func (a LearningSessionTable) WithSuffix(suffix string) *LearningSessionTable {
	return newLearningSessionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLearningSessionTable(schemaName, tableName, alias string) *LearningSessionTable {
	return &LearningSessionTable{
		learningSessionTable: newLearningSessionTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newLearningSessionTableImpl("", "excluded", ""),
	}
}

func newLearningSessionTableImpl(schemaName, tableName, alias string) learningSessionTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		UserIDColumn      = postgres.StringColumn("user_id")
		DeckIDColumn      = postgres.StringColumn("deck_id")
		EndedAtColumn     = postgres.TimestampzColumn("ended_at")
		ReviewCountColumn = postgres.IntegerColumn("review_count")
		allColumns        = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, UserIDColumn, DeckIDColumn, EndedAtColumn, ReviewCountColumn}
		mutableColumns    = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, UserIDColumn, DeckIDColumn, EndedAtColumn, ReviewCountColumn}
	)

	return learningSessionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		UserID:      UserIDColumn,
		DeckID:      DeckIDColumn,
		EndedAt:     EndedAtColumn,
		ReviewCount: ReviewCountColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
