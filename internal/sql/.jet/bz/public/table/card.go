//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Card = newCardTable("public", "card", "")

type cardTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz
	DeckID      postgres.ColumnString
	Content     postgres.ColumnString
	Translation postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CardTable struct {
	cardTable

	EXCLUDED cardTable
}

// AS creates new CardTable with assigned alias
func (a CardTable) AS(alias string) *CardTable {
	return newCardTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CardTable with assigned schema name
func (a CardTable) FromSchema(schemaName string) *CardTable {
	return newCardTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CardTable with assigned table prefix
func (a CardTable) WithPrefix(prefix string) *CardTable {
	return newCardTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CardTable with assigned table suffix
func (a CardTable) WithSuffix(suffix string) *CardTable {
	return newCardTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCardTable(schemaName, tableName, alias string) *CardTable {
	return &CardTable{
		cardTable: newCardTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newCardTableImpl("", "excluded", ""),
	}
}

func newCardTableImpl(schemaName, tableName, alias string) cardTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		DeckIDColumn      = postgres.StringColumn("deck_id")
		ContentColumn     = postgres.StringColumn("content")
		TranslationColumn = postgres.StringColumn("translation")
		allColumns        = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeckIDColumn, ContentColumn, TranslationColumn}
		mutableColumns    = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeckIDColumn, ContentColumn, TranslationColumn}
	)

	return cardTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		DeckID:      DeckIDColumn,
		Content:     ContentColumn,
		Translation: TranslationColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
